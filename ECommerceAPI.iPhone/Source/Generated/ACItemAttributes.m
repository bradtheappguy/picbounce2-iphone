/*
	ACItemAttributes.h
	The implementation of properties and methods for the ACItemAttributes object.
	Generated by SudzC.com
*/
#import "ACItemAttributes.h"

#import "ACArtist.h"
#import "ACDimensions.h"
@implementation ACItemAttributes
	@synthesize Title = _Title;
	@synthesize Artist = _Artist;
	@synthesize Type = _Type;
	@synthesize PhysicalDimensions = _PhysicalDimensions;
	@synthesize CanFrame = _CanFrame;
	@synthesize Description = _Description;

	- (id) init
	{
		if(self = [super init])
		{
			self.Title = nil;
			self.Artist = nil; // [[ACArtist alloc] init];
			self.Type = nil;
			self.PhysicalDimensions = nil; // [[ACDimensions alloc] init];
			self.Description = nil;

		}
		return self;
	}

	+ (ACItemAttributes*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (ACItemAttributes*)[[[ACItemAttributes alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Title = [Soap getNodeValue: node withName: @"Title"];
			self.Artist = [[ACArtist newWithNode: [Soap getNode: node withName: @"Artist"]] object];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
			self.PhysicalDimensions = [[ACDimensions newWithNode: [Soap getNode: node withName: @"PhysicalDimensions"]] object];
			self.CanFrame = [[Soap getNodeValue: node withName: @"CanFrame"] boolValue];
			self.Description = [Soap getNodeValue: node withName: @"Description"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"ItemAttributes"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Title != nil) [s appendFormat: @"<Title>%@</Title>", [[self.Title stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Artist != nil) [s appendString: [self.Artist serialize: @"Artist"]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PhysicalDimensions != nil) [s appendString: [self.PhysicalDimensions serialize: @"PhysicalDimensions"]];
		[s appendFormat: @"<CanFrame>%@</CanFrame>", (self.CanFrame)?@"true":@"false"];
		if (self.Description != nil) [s appendFormat: @"<Description>%@</Description>", [[self.Description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[ACItemAttributes class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.Title != nil) { [self.Title release]; }
		if(self.Artist != nil) { [self.Artist release]; }
		if(self.Type != nil) { [self.Type release]; }
		if(self.PhysicalDimensions != nil) { [self.PhysicalDimensions release]; }
		if(self.Description != nil) { [self.Description release]; }
		[super dealloc];
	}

@end
